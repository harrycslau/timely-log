<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Timely Log App</title>
  <link rel="manifest" href="manifest.json">
  <link rel="icon" sizes="192x192" href="assets/icons/icon-192.png">
  <link rel="apple-touch-icon" href="assets/icons/icon-192.png">  
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body { font-family: system-ui, sans-serif; }
    .startTimeCell { cursor: pointer; }
    /* Modal styles */
    .modal-overlay {
      position: fixed; top: 0; left: 0; right: 0; bottom: 0;
      background-color: rgba(0,0,0,0.5); display: none; justify-content: center; align-items: center;
    }
    .category-item {
      border: 1px solid #dee2e6;
      padding: 1rem;
      margin-bottom: 0.5rem;
      border-radius: 0.375rem;
    }
    .category-item > .cat-main { display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; }
    .category-item input[type="color"] { width: 50px; padding: 0; border: none; }
    .deleteCategoryBtn { cursor: pointer; color: #dc3545; font-weight: bold; }
    .subcategory-list { margin-left: 1.5rem; margin-top: 0.5rem; }
    .subcategory-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.5rem;
    }
    .deleteSubcategoryBtn { cursor: pointer; color: #dc3545; }
    @media (max-width: 768px) {
      .container { padding: 10px; }
      th, td { font-size: 0.9rem; }
      .category-item > .cat-main { flex-wrap: wrap; }
    }
  </style>
</head>
<body class="bg-light">
  <div class="container py-4">
    <h1 class="text-center mb-4">Timely Log — <span id="currentDate"></span></h1>
    
    <!-- "New Time" button -->
    <button id="btnNewTime" class="btn btn-success btn-lg w-100 mb-3">New Time</button>
    
    <!-- Table -->
    <div class="table-responsive">
      <table id="recordTable" class="table table-bordered table-hover">
        <thead class="table-light">
          <tr>
            <th>Start</th>
            <th>Category</th>
            <th>Subcategory</th>
            <th>Detail</th>
          </tr>
        </thead>
        <tbody>
          <!-- Records loaded dynamically -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Settings button -->
  <button id="settingsButton" class="btn btn-secondary rounded-circle position-fixed bottom-0 end-0 m-3">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
      <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
      <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
    </svg>
  </button>

  <!-- Settings Modal -->
  <div class="modal fade" id="settingsModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Configure Categories</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div id="categoryList">
            <!-- Category rows rendered here -->
          </div>
          <button id="addCategoryBtn" class="btn btn-success mt-3">Add Category</button>
        </div>
        <div class="modal-footer">
          <button id="saveCategoriesBtn" class="btn btn-primary">Save Categories</button>
        </div>
        <div style="font-size:3pt"><a href="https://www.flaticon.com/free-icons/time-and-date" title="time and date icons">Time and date icons created by Metami septiana - Flaticon</a></div>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    const today = new Date();
    // Generate YYYY-MM-DD using local timezone
    const currentDateStr = today.getFullYear() + '-' + 
    String(today.getMonth() + 1).padStart(2, '0') + '-' + 
    String(today.getDate()).padStart(2, '0');
    $('#currentDate').text(currentDateStr);
    
    let gCategories = [];
    
    // Load categories from backend
    function loadCategories(callback) {
      console.log('Loading categories...');
      $.ajax({
        url: 'save.php',
        type: 'POST',
        data: { action: 'getCategories' },
        dataType: 'json',
        success: function(res) {
          console.log('getCategories response:', res);
          if (res.status === 'ok') {
            gCategories = res.data;
            renderCategoriesModal();
            if (typeof callback === "function") { callback(); }
          } else {
            alert(res.message || 'Failed to load categories.');
          }
        },
        error: function(err) { console.error('Error in getCategories:', err); }
      });
    }
    
    // Render categories in the modal with nested subcategory lists
    function renderCategoriesModal() {
      const $list = $('#categoryList');
      $list.empty();
      gCategories.forEach((cat, idx) => {
        let subcategoryHTML = "";
        if (cat.Subcategories && cat.Subcategories.trim() !== "") {
          const subs = cat.Subcategories.split("|");
          subs.forEach(sub => {
            subcategoryHTML += `
              <div class="subcategory-item">
                <input type="text" class="form-control form-control-sm subcategoryInput" value="${sub}" placeholder="Subcategory" />
                <button class="btn btn-outline-danger btn-sm deleteSubcategoryBtn">×</button>
              </div>`;
          });
        }
        const item = $(`
          <div class="category-item">
            <div class="cat-main">
              <input type="text" class="form-control" data-idx="${idx}" value="${cat.Category}" placeholder="Category Name" />
              <input type="color" class="form-control form-control-color" data-idx="${idx}" value="${cat.Color}" />
              <button class="btn btn-outline-danger btn-sm deleteCategoryBtn" data-idx="${idx}">×</button>
            </div>
            <div class="subcategory-list">
              ${subcategoryHTML}
            </div>
            <button class="btn btn-outline-success btn-sm addSubcategoryBtn">Add Subcategory</button>
          </div>
        `);
        $list.append(item);
      });
    }
    
    $('#addCategoryBtn').click(function() {
      const newRow = $(`
        <div class="category-item">
          <div class="cat-main">
            <input type="text" class="form-control" placeholder="Category Name" />
            <input type="color" class="form-control form-control-color" value="#ffffff" />
            <button class="btn btn-outline-danger btn-sm deleteCategoryBtn">×</button>
          </div>
          <div class="subcategory-list"></div>
          <button class="btn btn-outline-success btn-sm addSubcategoryBtn">Add Subcategory</button>
        </div>
      `);
      $('#categoryList').append(newRow);
    });
    
    $('#categoryList').on('click', '.deleteCategoryBtn', function() {
      $(this).closest('.category-item').remove();
    });
    
    $('#categoryList').on('click', '.addSubcategoryBtn', function() {
      const newSubcategory = $(`
        <div class="subcategory-item">
          <input type="text" class="form-control form-control-sm subcategoryInput" placeholder="Subcategory" />
          <button class="btn btn-outline-danger btn-sm deleteSubcategoryBtn">×</button>
        </div>
      `);
      $(this).siblings('.subcategory-list').append(newSubcategory);
    });
    
    $('#categoryList').on('click', '.deleteSubcategoryBtn', function() {
      $(this).closest('.subcategory-item').remove();
    });
    
    function loadRecords() {
      console.log('Loading records for date:', currentDateStr);
      $.ajax({
        url: 'save.php',
        type: 'POST',
        data: { action: 'getRecords', date: currentDateStr },
        dataType: 'json',
        success: function(res) {
          console.log('getRecords response:', res);
          if (res.status === 'ok') { renderTable(res.data); }
          else { alert(res.message || 'Failed to load records.'); }
        },
        error: function(err) { console.error('Error in getRecords:', err); }
      });
    }
    
    // Render table rows with stable data-row attribute for consistent indexing.
    function renderTable(records) {
      const $tbody = $('#recordTable tbody');
      $tbody.empty();
      records.forEach(function(record, i) {
        const tr = $(`<tr data-row="${i}"></tr>`);
        // Start time cell becomes clickable.
        tr.append($("<td class='startTimeCell'></td>").text(record.starttime));
        // Category cell with select.
        const tdCategory = $('<td></td>');
        const selectCategory = $('<select class="form-select form-select-sm categorySelect"></select>');
        selectCategory.attr('data-selected-category', record.category);
        tdCategory.append(selectCategory);
        tr.append(tdCategory);
        // Subcategory cell with select.
        const tdSubcategory = $('<td></td>');
        const selectSubcategory = $('<select class="form-select form-select-sm subcategorySelect"></select>');
        selectSubcategory.attr('data-selected-subcategory', record.subcategory);
        tdSubcategory.append(selectSubcategory);
        tr.append(tdSubcategory);
        // Detail cell with input.
        const tdDetail = $('<td></td>');
        const inputDetail = $('<input type="text" class="form-control form-control-sm detailInput" />').val(record.detail);
        tdDetail.append(inputDetail);
        tr.append(tdDetail);
        $tbody.append(tr);
      });
      loadCategoriesIntoSelect();
    }
    
    // Helper: get stable row index from data-row attribute.
    function getRowIndex($element) {
      return parseInt($element.closest('tr').data('row'));
    }
    
    function loadCategoriesIntoSelect() {
      $('.categorySelect').each(function() {
        const $sel = $(this);
        const originalValue = $sel.attr('data-selected-category');
        $sel.empty();
        gCategories.forEach(cat => {
          const option = $(`<option value="${cat.Category}">${cat.Category}</option>`);
          $sel.append(option);
        });
        if (originalValue) { $sel.val(originalValue); } else { $sel.val(""); }
        updateSubcategorySelect($sel);
      });
    }
    function updateSubcategorySelect($categorySelect) {
      const categoryVal = $categorySelect.val();
      const $subcategorySelect = $categorySelect.closest('tr').find('.subcategorySelect');
      const originalSubcategory = $subcategorySelect.attr('data-selected-subcategory');
      $subcategorySelect.empty();
      const cat = gCategories.find(c => c.Category === categoryVal);
      if (cat && cat.Subcategories && cat.Subcategories.trim() !== "") {
        const subs = cat.Subcategories.split("|");
        subs.forEach(sub => {
          const option = $(`<option value="${sub}">${sub}</option>`);
          $subcategorySelect.append(option);
        });
        $subcategorySelect.prop('disabled', false);
        if (originalSubcategory) { $subcategorySelect.val(originalSubcategory); }
        else { $subcategorySelect.val(""); }
      } else {
        $subcategorySelect.append('<option value="">(none)</option>');
        $subcategorySelect.prop('disabled', true);
        $subcategorySelect.val("");
        saveFieldChange(getRowIndex($categorySelect), 'subcategory', "");
      }
    }
    
    $('#recordTable').on('change', '.categorySelect', function() {
      const rowIndex = getRowIndex($(this));
      const newValue = $(this).val();
      saveFieldChange(rowIndex, 'category', newValue);
      updateSubcategorySelect($(this));
    });
    
    $('#recordTable').on('change', '.subcategorySelect', function() {
      const rowIndex = getRowIndex($(this));
      const newValue = $(this).val();
      saveFieldChange(rowIndex, 'subcategory', newValue);
    });
    
    $('#recordTable').on('change', '.detailInput', function() {
      const rowIndex = getRowIndex($(this));
      const newValue = $(this).val();
      saveFieldChange(rowIndex, 'detail', newValue);
    });
    
    // Make the start time cell clickable for editing.
    $('#recordTable').on('click', '.startTimeCell', function() {
      if ($(this).find('input').length > 0) return;
      const currentText = $(this).text().trim();
      const $input = $('<input type="text" class="form-control form-control-sm editTimeInput" />').val(currentText);
      $(this).empty().append($input);
      $input.focus();
    });
    
    // When the edit input loses focus or Enter is pressed, save the new time.
    $('#recordTable').on('blur', '.editTimeInput', async function() {
      const newValue = $(this).val().trim();
      const $td = $(this).closest('td');
      const rowIndex = getRowIndex($(this));
  
      // First update the current row's starttime
      await $.ajax({
        url: 'save.php',
        type: 'POST',
        data: {
          action: 'updateField',
          date: currentDateStr,
          rowIndex: rowIndex,
          field: 'starttime',
          value: newValue
        },
        dataType: 'json'
      });
  
      // Then update the previous row's endtime if it exists
      if (rowIndex > 0) {
        await $.ajax({
          url: 'save.php',
          type: 'POST',
          data: {
            action: 'updateField',
            date: currentDateStr,
            rowIndex: rowIndex - 1,
            field: 'endtime',
            value: newValue
          },
          dataType: 'json'
        });
      }
  
      // Finally, reload the records to show the updated times
      loadRecords();
    });
    
    $('#recordTable').on('keydown', '.editTimeInput', function(e) {
      if (e.key === 'Enter') { $(this).blur(); }
    });
    
    function saveFieldChange(rowIndex, fieldName, fieldValue) {
      console.log('Saving change:', rowIndex, fieldName, fieldValue);
      $.ajax({
        url: 'save.php',
        type: 'POST',
        data: {
          action: 'updateField',
          date: currentDateStr,
          rowIndex: rowIndex,
          field: fieldName,
          value: fieldValue
        },
        dataType: 'json',
        success: function(res) {
          console.log('updateField response:', res);
          if (res.status !== 'ok') { alert(res.message || 'Update failed.'); }
        },
        error: function(err) { console.error('Error in updateField:', err); }
      });
    }
    
    $('#btnNewTime').click(function() {
      console.log('New record button pressed.');
      $.ajax({
        url: 'save.php',
        type: 'POST',
        data: { action: 'newRecord', date: currentDateStr },
        dataType: 'json',
        success: function(res) {
          console.log('newRecord response:', res);
          if (res.status === 'ok') { loadRecords(); }
          else { alert(res.message || 'Failed to add record.'); }
        },
        error: function(err) { console.error('Error in newRecord:', err); }
      });
    });
    
    $('#saveCategoriesBtn').click(function() {
      const newCats = [];
      $('#categoryList .category-item').each(function() {
        // Fix class names to match the rendered elements
        const name = $(this).find('.form-control:not(.form-control-color)').val();
        const color = $(this).find('.form-control-color').val();
        let subcategoryArr = [];
        $(this).find('.subcategoryInput').each(function() {
          const sub = $(this).val();
          if (sub.trim()) { subcategoryArr.push(sub.trim()); }
        });
        const subcategoriesStr = subcategoryArr.join("|");
        
        console.log('Processing category:', { name, color, subcategoriesStr }); // Debug logging
        
        if (name && name.trim()) {
          newCats.push({
            Category: name.trim(),
            Color: color || '#000000',
            Subcategories: subcategoriesStr
          });
        }
      });
  
      console.log('Saving categories:', newCats); // Debug logging
      
      if (newCats.length === 0) {
        alert('Please add at least one category with a name');
        return;
      }
  
      $.ajax({
        url: 'save.php',
        type: 'POST',
        data: {
          action: 'saveCategories',
          categories: JSON.stringify(newCats)
        },
        dataType: 'json',
        success: function(res) {
          console.log('saveCategories response:', res);
          if (res.status === 'ok') {
            gCategories = newCats;
            $('#settingsModal').modal('hide');
            alert('Categories updated');
            loadCategories(function() {
              loadRecords();
            });
          } else {
            alert(res.message || 'Failed to save categories.');
          }
        },
        error: function(err) {
          console.error('Error in saveCategories:', err);
          alert('Failed to save categories. Check console for details.');
        }
      });
    });
  
    // Update the modal event handlers to use Bootstrap's events
    $('#settingsModal').on('show.bs.modal', function() {
      loadCategories();
    });
  
    $('#settingsModal').on('hide.bs.modal', function() {
      // Optional: Add any cleanup code here
    });
  
    // Remove the old modal handlers and update the settings button click
    $('#settingsButton').click(function() {
      $('#settingsModal').modal('show');
    });
    
    $(document).ready(function() {
      loadCategories(function() { loadRecords(); });
    });
  </script>
</body>
</html>
